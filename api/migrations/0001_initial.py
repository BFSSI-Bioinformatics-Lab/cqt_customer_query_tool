# Generated by Django 4.1.9 on 2023-06-02 14:40

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import simple_history.models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Query",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("IN_PROGRESS", "In Progress"),
                            ("WAITING_FOR_APPROVAL", "Waiting for Approval"),
                            ("COMPLETED", "Completed"),
                        ],
                        default="IN_PROGRESS",
                        max_length=50,
                    ),
                ),
                ("number_RDIMS", models.IntegerField(blank=True, null=True)),
                ("date_input", models.DateTimeField(default=django.utils.timezone.now)),
                ("date_BHH_received", models.DateField(blank=True, null=True)),
                ("date_assigned_to_evaluator", models.DateField(blank=True, null=True)),
                ("date_to_sections_head_for_approval", models.DateField(blank=True, null=True)),
                ("date_to_customer", models.DateField(blank=True, null=True)),
                ("section_head", models.CharField(blank=True, max_length=500, null=True)),
                ("bmh_scientific_evaluator_lead", models.CharField(blank=True, max_length=500, null=True)),
                ("name_of_requestor", models.CharField(blank=True, max_length=500, null=True)),
                ("subject_line", models.TextField(blank=True, null=True)),
                ("query_text", models.TextField(blank=True, null=True)),
                ("query_response", models.TextField(blank=True, null=True)),
                ("key_words", models.CharField(blank=True, max_length=500, null=True)),
                (
                    "pathogen",
                    models.CharField(
                        choices=[
                            ("Campylobacter", "Campylobacter"),
                            ("Clostridium", "Clostridium"),
                            ("Cronobacter", "Cronobacter"),
                            ("Cyclospora", "Cyclospora"),
                            ("Escherichia coli", "Escherichia coli"),
                            ("Hepatitis", "Hepatitis"),
                            ("Listeria", "Listeria"),
                            ("Norovirus", "Norovirus"),
                            ("Salmonella", "Salmonella"),
                            ("Shigella", "Shigella"),
                            ("Vibrio", "Vibrio"),
                            ("Not Applicable / Other", "Not Applicable / Other"),
                        ],
                        default="Not Applicable / Other",
                        max_length=50,
                    ),
                ),
                (
                    "category",
                    models.CharField(
                        choices=[
                            ("Temperature (cooking, storage)", "Temperature (cooking, storage)"),
                            ("Regulations", "Regulations"),
                            ("Guidance", "Guidance"),
                            ("Micro criteria", "Micro criteria"),
                            ("Food handlers certificate", "Food handlers certificate"),
                            ("Leftovers", "Leftovers"),
                            ("Vulnerable populations", "Vulnerable populations"),
                            ("Dates (best before, expiry)", "Dates (best before, expiry)"),
                            ("Storage", "Storage"),
                            ("Catering", "Catering"),
                            ("Food handling", "Food handling"),
                            ("Spoilage", "Spoilage"),
                            ("Canning", "Canning"),
                            ("Not Applicable / Other", "Not Applicable / Other"),
                        ],
                        default="Not Applicable / Other",
                        max_length=50,
                    ),
                ),
                ("affiliations", models.DateField(blank=True, null=True)),
                ("query_redirected_to", models.DateField(blank=True, null=True)),
                ("additiona_information", models.TextField(blank=True, null=True)),
                ("updated", models.DateTimeField(auto_now=True)),
                (
                    "evaluator",
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL
                    ),
                ),
            ],
            options={
                "verbose_name": "Entry",
                "verbose_name_plural": "Entries",
            },
        ),
        migrations.CreateModel(
            name="HistoricalQuery",
            fields=[
                ("id", models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name="ID")),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("IN_PROGRESS", "In Progress"),
                            ("WAITING_FOR_APPROVAL", "Waiting for Approval"),
                            ("COMPLETED", "Completed"),
                        ],
                        default="IN_PROGRESS",
                        max_length=50,
                    ),
                ),
                ("number_RDIMS", models.IntegerField(blank=True, null=True)),
                ("date_input", models.DateTimeField(default=django.utils.timezone.now)),
                ("date_BHH_received", models.DateField(blank=True, null=True)),
                ("date_assigned_to_evaluator", models.DateField(blank=True, null=True)),
                ("date_to_sections_head_for_approval", models.DateField(blank=True, null=True)),
                ("date_to_customer", models.DateField(blank=True, null=True)),
                ("section_head", models.CharField(blank=True, max_length=500, null=True)),
                ("bmh_scientific_evaluator_lead", models.CharField(blank=True, max_length=500, null=True)),
                ("name_of_requestor", models.CharField(blank=True, max_length=500, null=True)),
                ("subject_line", models.TextField(blank=True, null=True)),
                ("query_text", models.TextField(blank=True, null=True)),
                ("query_response", models.TextField(blank=True, null=True)),
                ("key_words", models.CharField(blank=True, max_length=500, null=True)),
                (
                    "pathogen",
                    models.CharField(
                        choices=[
                            ("Campylobacter", "Campylobacter"),
                            ("Clostridium", "Clostridium"),
                            ("Cronobacter", "Cronobacter"),
                            ("Cyclospora", "Cyclospora"),
                            ("Escherichia coli", "Escherichia coli"),
                            ("Hepatitis", "Hepatitis"),
                            ("Listeria", "Listeria"),
                            ("Norovirus", "Norovirus"),
                            ("Salmonella", "Salmonella"),
                            ("Shigella", "Shigella"),
                            ("Vibrio", "Vibrio"),
                            ("Not Applicable / Other", "Not Applicable / Other"),
                        ],
                        default="Not Applicable / Other",
                        max_length=50,
                    ),
                ),
                (
                    "category",
                    models.CharField(
                        choices=[
                            ("Temperature (cooking, storage)", "Temperature (cooking, storage)"),
                            ("Regulations", "Regulations"),
                            ("Guidance", "Guidance"),
                            ("Micro criteria", "Micro criteria"),
                            ("Food handlers certificate", "Food handlers certificate"),
                            ("Leftovers", "Leftovers"),
                            ("Vulnerable populations", "Vulnerable populations"),
                            ("Dates (best before, expiry)", "Dates (best before, expiry)"),
                            ("Storage", "Storage"),
                            ("Catering", "Catering"),
                            ("Food handling", "Food handling"),
                            ("Spoilage", "Spoilage"),
                            ("Canning", "Canning"),
                            ("Not Applicable / Other", "Not Applicable / Other"),
                        ],
                        default="Not Applicable / Other",
                        max_length=50,
                    ),
                ),
                ("affiliations", models.DateField(blank=True, null=True)),
                ("query_redirected_to", models.DateField(blank=True, null=True)),
                ("additiona_information", models.TextField(blank=True, null=True)),
                ("updated", models.DateTimeField(blank=True, editable=False)),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")], max_length=1),
                ),
                (
                    "evaluator",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical Entry",
                "verbose_name_plural": "historical Entries",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
    ]
